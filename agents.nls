buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  bus_route       ; fixed route of the agent (bus)

]
 
globals [graph flip_num]

to init-buses
  ; Initialize your agents here.
  ;let route1 [4 5 16 11 17 7 1 19 23 14 0 15 18 15 12 22 13 10 21 20 9 8 2 8 6 8 9 3] ; starts at 3
  let orange_route [3 9 20 12 15 18 ]
  
  let brown_route [3 9 8 6 8 2 ]
 
 let green_route [3 4 10 13 23 19 1 ]
  let blue_route [3 20 21 22 0 14 ]
      let rev_brown_route [6 8 2 8 9 3]
  let start_bus_s 3
  
  ask buses [
    if not is-list? bus_route [
      ;print (word "Flip number " flip_num)
      set flip_num flip_num + 1
      ifelse remainder flip_num 2 = 0 [
        set bus_route brown_route
      ]
      [
        set bus_route brown_route
      ]
    ]
  ]

  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.
  
  ;print (word "--------EXECUTING ACTION----------- ")
  ;print (word "-----BUS " who " -----------")
  ;print (word "Prev" previous_stop " " current_stop " " next_stop)

  if current_stop != -1 [ 
    ;print (word " " current_stop)
    foreach bus_passengers [
      ;print (word " " ? " what " )
      if item 1 ? = current_stop [
        drop-off-passenger item 0 ?
      ]
    ]
    ;print (word "B_stop " current_stop " " get-passengers-at-stop current_stop ) 
    foreach get-passengers-at-stop current_stop [
        pick-up-passenger item 0 ? 
    ]
  ]
  ;print (word "GOO 2")
  let target item 0 bus_route
  ;print (word " " bus_route " Target " target)
  travel-to target
  if current_stop = target [
    set bus_route but-first bus_route
    set bus_route lput target bus_route
  ] 
  
  ;print (word "No. of waiting passenger " amount_passengers_waiting)
  ;print (word "No. of passesngers " length bus_passengers )
  ;add-bus-type
  
end


to add-bus-type 
  let flag_bus false
  let empty_seats 0
  
  ask buses [
    ifelse bus_type = 1 [
      set empty_seats empty_seats + (bus_type1_capacity - length bus_passengers)
      if length bus_passengers = bus_type1_capacity [
        ;set flag_bus true
      ]
    ]
    [
      ifelse bus_type = 2 [
        set empty_seats empty_seats + (bus_type1_capacity - length bus_passengers)
        if length bus_passengers = bus_type2_capacity [
          ;set flag_bus true
        ]
      ]
      [
        if bus_type = 3 [
          set empty_seats empty_seats + (bus_type1_capacity - length bus_passengers)
          if length bus_passengers = bus_type3_capacity [
            ;set flag_bus true
          ]
        ]
      ]
    ]
  ]
  
  ;print (word "Empty seats " empty_seats)
  if (2.75 * empty_seats) < amount_passengers_waiting [
    add-bus check-bus-type
  ]
  
end


to-report check-bus-type
  
  let total_passenger_waiting 0
  let report_type 0
  
  ask bus_stops [
    set total_passenger_waiting (total_passenger_waiting + length passengers_waiting)
  ]
  
  ifelse total_passenger_waiting > (3 * bus_type3_capacity) [
    set report_type 3
  ]
  [
    ifelse total_passenger_waiting > (3 * bus_type2_capacity) [
      set report_type 2
    ]
    [
      if total_passenger_waiting > (2 * bus_type1_capacity) [
        set report_type 1
      ]
    ]
  ]
  
  ;print (word "Call fod additional busses of type " report_type )
  report report_type
  
end