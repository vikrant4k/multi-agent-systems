buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  bus_route       ; fixed route of the agent (bus)
  temp_route      ; Temporary route until it reaches the target bus-stop

]
 
; cannot use globals flip_num
globals [graph flip_num]

to init-buses
  ; Initialize your agents here.
  let route1 [4 5 16 11 17 7 1 19 23 14 0 15 18 15 12 22 13 10 21 20 9 8 2 8 6 8 9 3] ; starts at 3
  
  set temp_route []
  
  ask buses [
    if not is-list? bus_route [
      set count_bus (count_bus + 1)
      
      set bus_route route1
    ]
  ]
  
  nw:set-context bus_stops routes
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.
  
  ;print (word "--------EXECUTING ACTION----------- ")
  ;print (word "-----BUS " who " -----------")
  ;print (word "Prev" previous_stop " " current_stop " " next_stop)
  
  let message []
  let addressee 0

  if current_stop != -1 [
    ;print (word " " current_stop)
    foreach bus_passengers [
      ;print (word " " ? " what " )
      if item 1 ? = current_stop [
        drop-off-passenger item 0 ?
      ]
    ]
    ;print (word "B_stop " current_stop " " get-passengers-at-stop current_stop ) 
    foreach get-passengers-at-stop current_stop [
        pick-up-passenger item 0 ? 
    ]
    
    if bus_type = 2 [
      set-bus-route bus_id 
    ]
    
  ]
  
  ; process recieved message, TODO:: delegate to funtion in later stage
  if length inbox > 0 [
    let read_msg item 0 inbox
    let recieved_msg item 2 read_msg
    
    let temp_command 0
    
    
    while [ not empty? recieved_msg]
    [
      let temp_command_value 0
      
      ifelse is-string? first recieved_msg [
        set temp_command item 0 recieved_msg
      ]
      [
        set temp_command_value item 0 recieved_msg
      ]
      set recieved_msg but-first recieved_msg
      
      if temp_command_value != 0 [
        ifelse temp_command = "GEN" [
          ; execute general method
        ][
          ifelse temp_command = "BUS" [
            ; execute Bus specific command
          ][
            ifelse temp_command = "BUS_S" [
              ; execute Bus-stop specific command
              ;print "1. SET temp route"
              ;print (word "Bus-id " bus_id " Sender's bus-stop " temp_command_value " Reciever stop " current_stop)
              ; update temporary route to sender's bus-stop
              set-temp-route bus_id temp_command_value
            ][
              ifelse temp_command = "PASS" [
                ; execute Passenger specific command
              ][
                if temp_command = "ROUTE" [
                  ; execute route specific command
              ]
            ]
          ]
        ]
       ]
      ]
      set inbox remove read_msg inbox
    ]
   ]
  
  ; Updating temporary short path based on incoming message
  ; set-temp-route bus_id target + 1
  
  ifelse empty? temp_route [
    ;Target updation of fixed route, Temporary code
    let target_id item 0 bus_route
    ;print (word " " bus_route " Target " target)
    
    ; find path back to original route
    ifelse is-adjacent? bus_id target_id [    
      travel-to target_id
      if current_stop = target_id [
        set bus_route but-first bus_route
        set bus_route lput target_id bus_route
      ]
    ][
      ;print "2. SET temp route"
      set-temp-route bus_id target_id
    ]
  ][
    print (word "Bus" bus_id "temp_route " temp_route)
    let target item 0 temp_route
    let target_id 0
    
    ask target [ set target_id who]
    
    ; update original route if it is same as temporary route
    if target_id = first bus_route [
      let target_bs item 0 bus_route
      set bus_route but-first bus_route
      set bus_route lput target_bs bus_route
    ]

    travel-to target_id
    if current_stop = target_id [
      set temp_route but-first temp_route
    ]
  ]
  
  ;print (word "No. of waiting passenger " amount_passengers_waiting)
  ;print (word "No. of passesngers " length bus_passengers )
  add-bus-type 
  
  
  
  ;; Send message
  if current_stop != -1 [
    ; construct message only based on ???? condition like passenger capacity full
    if check-bus-capacity bus_id [
      set message construct-message bus_id
      
      set addressee get-addressee bus_id true
      
      ; send message to new bus is available
      ifelse count buses with [bus_id = addressee] > 0 [
        
        if not check-bus-capacity addressee [
          send-message addressee message
          show (word "Message sent to Bus " addressee)
        ]
      ]
      [ ; send message to bus in the neighborhood
        set addressee get-addressee bus_id false
        if count buses with [bus_id = addressee] > 0 [
          send-message addressee message
          show (word "Message sent to Bus " addressee)
        ]
      ]
    ] 
 ]
  
end


to add-bus-type 
  let flag_bus false
  let empty_seats 0
  
  ask buses [
    ifelse bus_type = 1 [
      set empty_seats empty_seats + (bus_type1_capacity - length bus_passengers)
      if length bus_passengers = bus_type1_capacity [
        ;set flag_bus true
      ]
    ]
    [
      ifelse bus_type = 2 [
        set empty_seats empty_seats + (bus_type1_capacity - length bus_passengers)
        if length bus_passengers = bus_type2_capacity [
          ;set flag_bus true
        ]
      ]
      [
        if bus_type = 3 [
          set empty_seats empty_seats + (bus_type1_capacity - length bus_passengers)
          if length bus_passengers = bus_type3_capacity [
            ;set flag_bus true
          ]
        ]
      ]
    ]
  ]
  
  ;print (word "Empty seats " empty_seats)
  if (2.75 * empty_seats) < amount_passengers_waiting [
    add-bus check-bus-type
    show count_bus
  ]
  
end


to-report check-bus-type
  
  let total_passenger_waiting 0
  let report_type 0
  
  ask bus_stops [
    set total_passenger_waiting (total_passenger_waiting + length passengers_waiting)
  ]
  
  ifelse total_passenger_waiting > (3 * bus_type3_capacity) [
    set report_type 3
  ]
  [
    ifelse total_passenger_waiting > (3 * bus_type2_capacity) [
      set report_type 2
    ]
    [
      if total_passenger_waiting > (2 * bus_type1_capacity) [
        set report_type 1
      ]
    ]
  ]
  
  ;print (word "Call fod additional busses of type " report_type )
  report report_type
  
end

to-report construct-message [b_id]
  let message []
  
  ask buses with [bus_id = b_id] [
    ; general messages
    set message lput "GEN" message
    
    ; check bus capacity is full or not
    if check-bus-capacity b_id [
      set message lput 1 message
    ]
    
    ; Bus specific message
    set message lput "BUS" message
    set message lput b_id message
    
    ; Bus-stop specific message
    set message lput "BUS_S" message
    set message lput current_stop message
    
    
    ; Passenger specific message
    set message lput "PASS" message
    
    ; Route specific message
    set message lput "ROUTE" message
       
  ]
  
  report message
end

; b_id: bus Id
; flag_new: If true report new bus id else report nearest bus id
; reports back bus-id of newest/nearest bus 
to-report get-addressee [b_id flag_new]
  let report_id 0
  
  ifelse flag_new [
  ; new bus id
    let current_b_id count buses
    let new_b_id current_b_id + 24
    set report_id new_b_id
  ][
    ; nearest bus
    let near_b min-one-of other buses [distance myself]
    ask near_b [ set report_id bus_id ]
  ]
  
  report report_id
end

;; return true if bus is full
to-report check-bus-capacity [b_id]
  let bus_full false
  let passenger_at_stop 0
  
  ask bus b_id [
    if current_stop != -1 [
      set passenger_at_stop length get-passengers-at-stop current_stop
    ]
    
    ifelse bus_type = 1 [
      if ((length bus_passengers + passenger_at_stop) - bus_type1_capacity) > 0 [
        set bus_full true
        ]
      
    ]
    [ ifelse bus_type = 2 [
        if ((length bus_passengers + passenger_at_stop) - bus_type1_capacity) = 0 [
        set bus_full true
        ]
      ]
      [ if bus_type = 3 [
          if ((length bus_passengers + passenger_at_stop) - bus_type1_capacity) = 0 [
            set bus_full true
          ]
        ]
      ]
    ]
  ]
  
  report bus_full
end


; set up temporary route to target bus-stop for bus_id
to set-temp-route [b_id target]
  let dummy_route []
  ask bus b_id [
    let path_list []
    let temp_stop current_stop
    let temp_var1 bus_stop current_stop
    let temp_var2 -1
    
    ; current stop could be -1 if the gent is travelling in between stop
    if current_stop = -1 [
      set temp_stop next_stop 
      set temp_var1 temp_stop
    ]
    
    ask bus_stop temp_stop [
      ;; Construct the turtle path, putting the current bus_stop on the front:
      set path_list fput self nw:path-to bus_stop target
      ; show path_list
    ]
    set dummy_route lput bus_stop current_stop dummy_route
    
    
    ; remove the bus_stop information
    set path_list but-first path_list
    
    while [ not empty? path_list] [
      let path_item first path_list
      ask path_item [
        ;print (word "1. end1 " end1 " end2 " end2 " dummy route " dummy_route)

       ifelse end1 = temp_var1 [
         if member? temp_var1 dummy_route [
           set dummy_route remove temp_var1 dummy_route
         ]
         set dummy_route lput temp_var1 dummy_route
         set temp_var2 end2
         set dummy_route lput temp_var2 dummy_route
         ;print (word "2. end1 " end1 " end2 " end2 " dummy route " dummy_route)
       ][ 
           ifelse end2 = temp_var1 [
           if member? temp_var1 dummy_route [
             set dummy_route remove temp_var1 dummy_route
           ]
           set dummy_route lput temp_var1 dummy_route
           set temp_var2 end1
           set dummy_route lput temp_var2 dummy_route
           ;print (word "3. end1 " end1 " end2 " end2 " dummy route " dummy_route)
         ][
           set temp_var1 end1
           set dummy_route lput temp_var1 dummy_route
           set temp_var2 end2
           set dummy_route lput temp_var2 dummy_route
           ;print (word "4. end1 " end1 " end2 " end2 " dummy route " dummy_route)
         ]
       ]
       

      ]
        set path_list but-first path_list
      ]
    ]
  
  ; forming a circular route to return to original point of deviation
  set dummy_route remove-duplicates dummy_route
  let dummy_route_reverse reverse dummy_route
  foreach dummy_route [ set dummy_route_reverse lput ? dummy_route_reverse ]
  
  ; print (word "Dummy route " dummy_route)
  
  set temp_route but-first dummy_route
end


to set-bus-route[b_id]
  let temp_bus_route []
  
  ask bus b_id[
    let passenger_destination []
    let distance_passenger []
    
    
    foreach bus_passengers[
      let destination_distance 0
      set passenger_destination lput item 1 ? passenger_destination
      set destination_distance get-shortest-distance item 1 ? current_stop
      set distance_passenger (list destination_distance item 0 ?)
    ]
    
    set distance_passenger sort-by [first ?1 < first ?2] distance_passenger
    
    foreach distance_passenger[
      set temp_bus_route item 0 ? 
    ]
    set bus_route temp_bus_route
  ]
  
end


to-report get-shortest-distance [bs_1 bs_2]
  let shortest_distance 0
  let shortest_path []
  
  
  ifelse is-link? route bs_1 bs_2 [
    set shortest_distance get-distance bs_1 bs_2
  ][
      
      ask bus_stop bs_1 [
      ;; Construct the turtle path, putting the current bus_stop on the front:
      set shortest_path fput self nw:path-to bus_stop bs_2
      ; show path_list
    ]
      
    set shortest_path but-first shortest_path
    let temp bus_stop bs_1
    
    while [ not empty? shortest_path] [
      let path_item first shortest_path
      ask path_item [
        ifelse end1 = temp[
          set shortest_distance (shortest_distance + get-distance temp end2)
          set temp end2
        ][
          set shortest_distance (shortest_distance + get-distance temp end1)
          set temp end1        
        ]
      ]
      
      set shortest_path but-first shortest_path
    ]
  ]
  report shortest_distance

end